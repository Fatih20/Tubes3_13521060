generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  sessions      Session[]
  ChatSession   ChatSession[]
  SavedQuestion SavedQuestion[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatSession {
  id     String @id @default(cuid())
  userId String
  title  String @db.VarChar(100)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Chat   Chat[]

  @@index([userId])
}

model Chat {
  id            String      @id @default(cuid())
  chatSessionId String
  fromUser      Boolean
  text          String      @db.LongText
  textLength    Int
  time          DateTime
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@index([chatSessionId])
}

model SavedQuestion {
  id             String   @id @default(cuid())
  userId         String
  question       String   @db.LongText
  questionLength Int
  answer         String   @db.LongText
  answerLength   Int
  time           DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SavedQuestionGlobal {
  id       String   @id @default(cuid())
  question String   @db.LongText
  answer   String   @db.LongText
  time     DateTime
}
